(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{153:function(t,e,s){"use strict";s.r(e);var a=s(0),r=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"sorting"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sorting","aria-hidden":"true"}},[t._v("#")]),t._v(" Sorting")]),s("blockquote",[s("p",[s("strong",[t._v("Stable Sort")]),t._v(" - when the relative positions of items with the same key does not change.")])]),s("h2",{attrs:{id:"selection-sort"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#selection-sort","aria-hidden":"true"}},[t._v("#")]),t._v(" Selection Sort")]),s("blockquote",[s("p",[t._v("Select smallest item in list and place at beginning (swap with first item), and repeat for the rest of the list until list is sorted.")])]),s("ul",[s("li",[t._v("Best Case: "),s("code",[t._v("O(n^2)")])]),s("li",[t._v("Avg. Case: "),s("code",[t._v("O(n^2)")])]),s("li",[t._v("Worst Case: "),s("code",[t._v("O(n^2)")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("TODO: pseudocode\n")])])]),s("h2",{attrs:{id:"merge-sort"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#merge-sort","aria-hidden":"true"}},[t._v("#")]),t._v(" Merge Sort")]),s("blockquote",[s("p",[t._v("Partition list randomly into 2, then sort each recursively, and merge the 2 sorted list into a final solution.")])]),s("ul",[s("li",[t._v("Best Case: "),s("code",[t._v("O(nlogn)")])]),s("li",[t._v("Avg. Case: "),s("code",[t._v("O(nlogn)")])]),s("li",[t._v("Worst Case: "),s("code",[t._v("O(nlogn)")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("TODO: pseudocode\n")])])]),s("h2",{attrs:{id:"quick-sort"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#quick-sort","aria-hidden":"true"}},[t._v("#")]),t._v(" Quick Sort")]),s("blockquote",[s("p",[t._v("Partition list based on pivot value in the current middle position, then sort each partition recursively for a final solution.")])]),s("ul",[s("li",[t._v("Best Case: "),s("code",[t._v("O(nlogn)")])]),s("li",[t._v("Avg. Case: "),s("code",[t._v("O(nlogn)")])]),s("li",[t._v("Worst Case: "),s("code",[t._v("O(n^2)")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("TODO: pseudocode\n")])])])])}],!1,null,null,null);e.default=r.exports}}]);